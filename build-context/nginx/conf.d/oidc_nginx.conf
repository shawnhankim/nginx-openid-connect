# -----------------------------------------------------------------------------#
#                                                                              #
#                  NGINX Configuration for OpenID Connect                      #
#                            (within http block)       |                       #
#                                                      |                       #
#              http {                                  |                       #
#                    :                                 |                       #
#                  +------------------------------+    |                       #
#                  | include "oidc_nginx.conf";   | <--+                       #
#                  +------------------------------+                            #
#                    :                                                         #
#                  server {                                                    #
#                      :                                                       #
#                  }                                                           #
#                    :                                                         #
#              }                                                               #
#                                                                              #
# - This file is to configure NGINX related info to handle OIDC workflow.      #
# - Each map block allows multi values so that multiple IdPs can be supported. #
# - The $host variable is used as default input parameter but can be changed.  #
#                                                                              #
# ---------------------------------------------------------------------------- #

variables_hash_max_size    4096;

map $proto $oidc_cookie_flags {
    http  "Path=/; SameSite=lax;";                   # For HTTP/plaintext test
    https "Path=/; SameSite=lax; HttpOnly; Secure;"; # Production recommendation
}

map $http_x_forwarded_port $redirect_base {
    ""      $proto://$host:$server_port;
    default $proto://$host:$http_x_forwarded_port;
}

map $http_x_forwarded_proto $proto {
    ""      $scheme;
    default $http_x_forwarded_proto;
}

map $host $post_logout_return_uri {
    default $redirect_base;
}

map $proxy_id $backend_proxy {
    default          http://my_backend_api;
    example_proxy_id http://my_backend_api;
}

map $host $return_token_to_client_on_login {
    # This is to return token as a query param to the app after successful login.
    # +------------+-----------------------------------------------------------+
    # | options    | example                                                   |
    # +------------+-----------------------------------------------------------+
    # | id_token   | http://www.example.com/login?id_token=sdfsdfdsfs          |
    # | none or "" | http://www.example.com  (no query param)                  |
    # +------------+-----------------------------------------------------------+
    default "";
}

map $host $forward_token_to_backend {
    # This is to forward token to the backend in the proxy request header.
    # +--------------+---------------------------------------------------------+
    # | options      | example                                                 |
    # +--------------+---------------------------------------------------------+
    # | access_token | Authorization : Bearer <access_token>                   |
    # | id_token     | x-id-token : sdfdsfdsfds                                |
    # | both         | Authorization : Bearer <access_token> & x-id-token : xx |                                |
    # | none or ""   | not return token back to the client app.                |
    # +--------------+---------------------------------------------------------+
    default "access_token";
}

# ADVANCED CONFIGURATION BELOW THIS LINE
# Additional advanced configuration (server context) in oidc_server.conf

# JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:64k max_size=1m;

# Key/Value store for ID token, access token and refresh token.
# Change timeout values to at least the validity period of each token type
keyval_zone zone=oidc_id_tokens:1M       state=conf.d/oidc_id_tokens.json      timeout=1h;
keyval_zone zone=oidc_access_tokens:1M   state=conf.d/oidc_access_tokens.json  timeout=1h;
keyval_zone zone=oidc_refresh_tokens:1M  state=conf.d/oidc_refresh_tokens.json timeout=8h;

# Temporary storages.
keyval_zone zone=oidc_pkce:128K               timeout=90s; # for PKCE code verifier
keyval_zone zone=oidc_nonce_hash:128K         timeout=90s; # for NONCE
keyval_zone zone=oidc_token_query_params:128K timeout=90s; # for query params of token endpoint

keyval $cookie_auth_token $id_token           zone=oidc_id_tokens;          # Exchange cookie for ID      token
keyval $cookie_auth_token $access_token       zone=oidc_access_tokens;      # Exchange cookie for access  token
keyval $cookie_auth_token $refresh_token      zone=oidc_refresh_tokens;     # Exchange cookie for refresh token
keyval $request_id        $new_id_token       zone=oidc_id_tokens;          # For initial session creation for ID token
keyval $request_id        $new_access_token   zone=oidc_access_tokens;      # For initial session creation for access token
keyval $request_id        $new_refresh        zone=oidc_refresh_tokens;     # For initial session creation for refresh token
keyval $request_id        $nonce_hash         zone=oidc_nonce_hash;         # For NONCE
keyval $request_id        $token_query_params zone=oidc_token_query_params; # for query params of token endpoint
keyval $pkce_id           $pkce_code_verifier zone=oidc_pkce;

auth_jwt_claim_set        $jwt_audience aud; # In case aud is an array
js_import oidc from conf.d/oidc.js;

# vim: syntax=nginx