# OpenID Connect configuration
#
# Each map block allows multiple values so that multiple IdPs can be supported,
# the $host variable is used as the default input parameter but can be changed.
#
variables_hash_max_size    4096;

map $host $oidc_authz_endpoint {
    default          "https://dev-9590480.okta.com/oauth2/v1/authorize";
    #www.example.com "https://my-idp/oauth2/v1/authorize";
}

map $host $oidc_token_endpoint {
    default          "https://dev-9590480.okta.com/oauth2/v1/token";
}

map $host $oidc_custom_token_endpoint {
    default          $oidc_token_endpoint;
}

map $host $oidc_jwt_keyfile {
    default          "https://dev-9590480.okta.com/oauth2/v1/keys";
}

map $host $oidc_userinfo_endpoint {
    default          "https://dev-9590480.okta.com/oauth2/v1/userinfo";
}

map $host $oidc_logout_endpoint {
    default          "https://dev-9590480.okta.com/oauth2/v1/logout";
    #www.example.com "https://{my-app}.okta.com/oauth2/{version}/logout";
}

map $host $oidc_pkce_enable {
    default          1;
}

# Create this file and fill the following map in your path of /etc/nginx/conf.d/
# - $oidc_client
# - $oidc_client_secret
# - If you don't want to create the file, comment this `include` directive, and
#   uncomment two below `map` directives.
include "./conf.d/oidc_credentials.conf";

# map $host $oidc_client {
#     default          "your client ID";
# }

# map $host $oidc_client_secret {
#     default          "your client secret";
# }

map $host $oidc_scopes {
    default           "openid+profile+email+offline_access";
}

map $host $oidc_logout_redirect {
    # Where to send browser after requesting /logout location. This can be
    # replaced with a custom logout page, or complete URL.
    default "/_logout"; # Built-in, simple logout page
}

map $host $oidc_rp_initiated_logout_enable {
    # 1: OIDC RP-initiated logout
    # 0: $oidc_logout_query_params is used for custom logout if an IDP doesn't 
    #    support OIDC RP-initiated logout.
    default 1;
}

map $host $oidc_logout_query_params {
    # This is used when `$oidc_rp_initiated_logout_enable` is true.
    # It can be either manually modified or generated by APIM's `logOutParams`.
    default                 "";
    #
    # Example 1: AWS Cognito Logout and prompt an user to sign in as another user
    # www.example.com         '{
    #     "response_type": "code",
    #     "client_id"    : "$oidc_client",
    #     "redirect_uri" : "$redirect_base$redir_location",
    #     "state"        : "STATE",
    #     "scope"        : "$oidc_scopes"
    # }';
    #
    # Example 2: AWS Cognito Logout and redirect back to client
    # www.example.com         '{
    #     "client_id"    : "$oidc_client",
    #     "logout_uri"   : "$redirect_base/_logout"
    # }';
}

map $host $oidc_logout_path_params_enable {
    default 0;
}

map $host $oidc_logout_path_params {
    default           "";
    # www.example.com '{
    #     "my-app" : "dev-9590480",
    #     "version": "v1"
    # }';
}

map $host $oidc_authz_query_params_enable {
    default                 0;
}

map $host $oidc_authz_query_params {
    default           "";
    # www.example.com '{
    #     "response_type": "code",
    #     "scope"        : "$oidc_scopes",
    #     "client_id"    : "$oidc_client",
    #     "redirect_uri" : "$redirect_base$redir_location",
    #     "nonce"        : "$nonce_hash",
    #     "state"        : 0
    # }';
}

map $host $oidc_authz_path_params_enable {
    default                 0;
}

map $host $oidc_authz_path_params {
    default           "";
    # www.example.com '{
    #     "my-app" : "dev-9590480",
    #     "version": "v1"
    # }';
}

map $host $oidc_token_query_params_enable {
    default 0;
}

map $host $oidc_token_query_params {
    default           "";
    # www.example.com '{ "example": "data" }';
}

map $host $oidc_token_path_params_enable {
    default 0;
}

map $host $oidc_token_path_params {
    default           "";
    # www.example.com '{
    #     "my-app" : "dev-9590480",
    #     "version": "v1"
    # }';
}

map $host $oidc_hmac_key {
    # This should be unique for every NGINX instance/cluster
    default                 "ChangeMe";
}

map $proto $oidc_cookie_flags {
    http  "Path=/; SameSite=lax;"; # For HTTP/plaintext testing
    https "Path=/; SameSite=lax; HttpOnly; Secure;"; # Production recommendation
}

map $http_x_forwarded_port $redirect_base {
    ""      $proto://$host:$server_port;
    default $proto://$host:$http_x_forwarded_port;
}

map $http_x_forwarded_proto $proto {
    ""      $scheme;
    default $http_x_forwarded_proto;
}

map $host $post_logout_return_uri {
    default $redirect_base;
}

map $host $return_token_to_client_on_login {
    # This is only effective for /login endpoint exposed. By default,
    # this implementation MUST not return any token back to the client app. 
    # If its configured it can send id_token in the request uri 
    # as ?id_token=sdfsdfdsfs after successful login.
    default ""; # options: id_token or ""
}

map $host $return_token_to_backend {
    # This is always effective as default this forward access_token as Bearer token.
    # However this can be configured to just forward the id_token in the request 
    # header as `x-id-token=sdfdsfdsfds`. If its configured to forward both then
    # the proxy request header would have:
    #   Authorization : Bearer <access_token> & x-id-token : sdfdsfdsfds. If its
    #   configured as none then NO token(s) get forwarded to the backend service.
    default "access_token"; # options: access_token, id_token, "", or both
}

map $proxy_id $backend_proxy {
    default            http://my_backend_api;
    'example_proxy_id' http://my_backend_api;
}

# ADVANCED CONFIGURATION BELOW THIS LINE
# Additional advanced configuration (server context) in oidc_server.conf

# JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:64k max_size=1m;

# Key/Value store for ID token, access token and refresh token.
# Change timeout values to at least the validity period of each token type
keyval_zone zone=oidc_id_tokens:1M       state=conf.d/oidc_id_tokens.json      timeout=1h;
keyval_zone zone=oidc_access_tokens:1M   state=conf.d/oidc_access_tokens.json  timeout=1h;
keyval_zone zone=oidc_refresh_tokens:1M  state=conf.d/oidc_refresh_tokens.json timeout=8h;

# Temporary storages.
keyval_zone zone=oidc_pkce:128K                 timeout=90s; # for PKCE code verifier
keyval_zone zone=oidc_nonce_hash:128K           timeout=90s; # for NONCE
keyval_zone zone=oidc_token_query_params:128K   timeout=90s; # for query params of token endpoint

keyval $cookie_auth_token $id_token           zone=oidc_id_tokens;          # Exchange cookie for ID      token
keyval $cookie_auth_token $access_token       zone=oidc_access_tokens;      # Exchange cookie for access  token
keyval $cookie_auth_token $refresh_token      zone=oidc_refresh_tokens;     # Exchange cookie for refresh token
keyval $request_id        $new_id_token       zone=oidc_id_tokens;          # For initial session creation for ID token
keyval $request_id        $new_access_token   zone=oidc_access_tokens;      # For initial session creation for access token
keyval $request_id        $new_refresh        zone=oidc_refresh_tokens;     # For initial session creation for refresh token
keyval $request_id        $nonce_hash         zone=oidc_nonce_hash;         # For NONCE
keyval $request_id        $token_query_params zone=oidc_token_query_params; # for query params of token endpoint
keyval $pkce_id           $pkce_code_verifier zone=oidc_pkce;

auth_jwt_claim_set $jwt_audience aud; # In case aud is an array
js_import oidc from conf.d/oidc.js;

# vim: syntax=nginx