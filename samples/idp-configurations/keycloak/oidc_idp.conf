# ---------------------------------------------------------------------------- #
#                                                                              #
#                     IDP Configuration for OpenID Connect                     #
#                            (within http block)   |                           #
#                                                  |                           #
#              http {                              |                           #
#                    :                             |                           #
#                  +--------------------------+    |                           #
#                  | include "oidc_idp.conf"; | <--+                           #
#                  +--------------------------+                                #
#                    :                                                         #
#                  server {                                                    #
#                      :                                                       #
#                  }                                                           #
#                    :                                                         #
#              }                                                               #
#                                                                              #
# - This file is to configure IDP related info to handle OIDC workflow.        #
# - Each map block allows multi values so that multiple IdPs can be supported. #
#                                                                              #
# ---------------------------------------------------------------------------- #

# ---------------------------------------------------------------------------- #
#   1. OpenID Provider(IDP) Metadata Configuration via Well-Known Endpoints    #
# ---------------------------------------------------------------------------- #

map $x_client_id $oidc_authz_endpoint {
    my-client-id "http://host.docker.internal:8080/auth/realms/master/protocol/openid-connect/auth";
    # my-client-id "https://{my-app}.okta.com/oauth2/{version}/authorize";
}

map $x_client_id $oidc_jwt_keyfile {
    default "http://host.docker.internal:8080/auth/realms/master/protocol/openid-connect/certs";
}

map $x_client_id $oidc_logout_endpoint {
    default "http://host.docker.internal:8080/auth/realms/master/protocol/openid-connect/logout";
    # my-client-id "https://{my-app}.okta.com/oauth2/{version}/logout";
}

map $x_client_id $oidc_token_endpoint {
    default "http://host.docker.internal:8080/auth/realms/master/protocol/openid-connect/token";
    # my-client-id "https://{my-app}.okta.com/oauth2/{version}/token";
}

map $x_client_id $oidc_userinfo_endpoint {
    default "http://host.docker.internal:8080/auth/realms/master/protocol/openid-connect/userinfo";
}

map $x_client_id $oidc_scopes {
    default "openid+profile+email+offline_access";
}


# ---------------------------------------------------------------------------- #
#   2. Custom Configuration for Well-Known OIDC Endpoints                      #
# ---------------------------------------------------------------------------- #

map $x_client_id $oidc_authz_path_params_enable {
    default 0;
}

map $x_client_id $oidc_authz_path_params {
    default "";
    # my-client-id '{ "my-app": "dev-9590480", "version": "v1" }';
}

map $x_client_id $oidc_authz_query_params_enable {
    default 0;
}

map $x_client_id $oidc_authz_query_params {
    default "";
    # my-client-id '{ # example: custom query param
    #     "response_type": "code",
    #     "scope"        : "$oidc_scopes",
    #     "client_id"    : "$oidc_client",
    #     "redirect_uri" : "$redirect_base$redir_location",
    #     "nonce"        : "$nonce_hash",
    #     "state"        : 0
    # }';
}

map $x_client_id $oidc_logout_path_params_enable {
    default 0;
}

map $x_client_id $oidc_logout_path_params {
    default "";
    # my-client-id '{ "my-app": "dev-9590480", "version": "v1" }';
}

map $x_client_id $oidc_logout_query_params_enable {
    default 0; # 0: OIDC RP-initiated logout, 1: custom logout
}

map $x_client_id $oidc_logout_query_params {
    default ""; # Use for when an IDP supports OIDC RP-initiated logout.
    # my-client-id '{ # custom logout example w/ AWS Cognito
    #     "client_id"    : "$oidc_client",
    #     "logout_uri"   : "$redirect_base/_logout"
    # }';
}

map $x_client_id $oidc_token_path_params_enable {
    default 0;
}

map $x_client_id $oidc_token_path_params {
    default "";
    # my-client-idcom '{ "my-app": "dev-9590480", "version": "v1" }';
}

map $x_client_id $oidc_token_query_params_enable {
    default 0;
}

map $x_client_id $oidc_token_query_params {
    default "";
    # my-client-id '{ "example": "data" }';
}


# ---------------------------------------------------------------------------- #
#   3. Advanced OIDC Configuration                                             #
# ---------------------------------------------------------------------------- #

map $x_client_id $oidc_client {
    default "my-client-id";
}

map $x_client_id $oidc_client_secret {
    default "781b60a6-8279-43dd-9cbc-cc98329ce2a7"; #"my-client-secret";
}

map $x_client_id $oidc_logout_redirect {
    default "/_logout"; # This is called by IdP after successful logout.
}

map $x_client_id $oidc_hmac_key {
    default "ChangeMe"; # This should be unique for every NGINX instance/cluster
}

map $x_client_id $oidc_pkce_enable {
    default 0;
}

map $x_client_id $oidc_app_name {
    default      "";
    my-client-id "my-client-app";
}

# vim: syntax=nginx